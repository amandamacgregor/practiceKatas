using PencilKata.Library;
using Xunit;
using Shouldly;

namespace PencilKata.Tests
{
    public class SharpenTests
    {
        [Fact]
        public void WhenSharpeningPencilPointDurabilityIsRestoredToInitialValue()
        {
            var pencil = new Pencil(15, 6);
            var paper = new Paper();
            var testString = "Mighty Mouse";
            var expected = "Mighty MouseMighty Mouse";

            pencil.Write(paper, testString);
            pencil.Sharpen();
            pencil.Write(paper, testString);
            
            paper.Contents.ShouldBe(expected);
        }

        [Fact]
        public void WhenSharpeningPencilWithNoLengthDurabilityIsNotRestored()
        {
            var pencil = new Pencil(15, 0);
            var paper = new Paper();
            var testString = "Mighty Mouse";
            var expected = "Mighty MouseM           ";

            pencil.Write(paper, testString);
            pencil.Sharpen();
            pencil.Write(paper, testString);
            
            paper.Contents.ShouldBe(expected);
        }
    }
}