using PencilKata.Library;
using Xunit;
using Shouldly;

namespace PencilKata.Tests
{
    public class SharpenTests
    {
        private Pencil _pencil;
        private Paper _paper;

        private void SetupDesk(int pencilDurability, int pencilLength, bool addPaper)
        {
            _pencil = new Pencil(pencilDurability, pencilLength);

            if (addPaper)
            {
                _paper = new Paper();
            }
        }
        
        [Fact]
        public void WhenSharpeningPencilPointDurabilityIsRestoredToInitialValue()
        {
            SetupDesk(15, 6, true);
            var testString = "Mighty Mouse";
            var expected = "Mighty MouseMighty Mouse";

            _pencil.Write(_paper, testString);
            _pencil.Sharpen();
            _pencil.Write(_paper, testString);
            
            _paper.Contents.ShouldBe(expected);
        }

        [Fact]
        public void WhenSharpeningPencilWithNoLengthDurabilityIsNotRestored()
        {
            SetupDesk(15, 0, true);
            var testString = "Mighty Mouse";
            var expected = "Mighty MouseM           ";

            _pencil.Write(_paper, testString);
            _pencil.Sharpen();
            _pencil.Write(_paper, testString);
            
            _paper.Contents.ShouldBe(expected);
        }

        [Fact]
        public void WhenSharpeningPencilDownToZeroOnlyFinalSharpenFails()
        {
            SetupDesk(5, 2, true);
            var testString1 = "Test";
            var testString2 = " test";
            var expected = "Test test test t   ";

            _pencil.Write(_paper, testString1);
            _pencil.Sharpen();
            _pencil.Write(_paper, testString2);
            _pencil.Sharpen();
            _pencil.Write(_paper, testString2);
            _pencil.Sharpen();
            _pencil.Write(_paper, testString2);
            
            _paper.Contents.ShouldBe(expected);
        }
    }
}