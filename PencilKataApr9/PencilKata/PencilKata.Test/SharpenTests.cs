using PencilKata.Desk;
using Xunit;
using Shouldly;

namespace PencilKata.Test
{
    public class SharpenTests
    {
        private void WriteLots(Pencil pencil, string thingToWrite, int timesToWrite)
        {
            for (var i = 0; i < timesToWrite; i++)
            {
                pencil.Write(thingToWrite);
            }
        }
        
        [Fact]
        public void WhenSharpeningDurabilityIsRestored()
        {
            var startDurability = 25;
            var pencil = new Pencil(startDurability, 5);
            var testString = "Boom";

            WriteLots(pencil, testString, 5);

            pencil.Sharpen();
            
            pencil.Durability.ShouldBe(startDurability);
        }

        [Fact]
        public void WhenSharpeningDurabilityWithZeroLengthDurabilityDoesNotRestore()
        {
            var startDurability = 25;
            var startLength = 0;
            var testString = "Boom";
            var pencil = new Pencil(startDurability, length: startLength);
            WriteLots(pencil, testString, 5);
            
            pencil.Sharpen();
            
            pencil.Durability.ShouldBe(0);
        }
    }
}